#include<iostream> 
#include<cstdio>
#include<algorithm>

using namespace std;

const int MAXV = 110;
const int MAXE = 10010;
//边集定义部分
struct edge
{
	int u, v;    //边的两个端点编号
	int cost;   //边权
}E[MAXE];       //最多有MAXE边
bool cmp(edge a, edge b)
{
	return a.cost < b.cost;
}
//并查集部分
int father[MAXV];//并查集数组
int findFather(int x)
{
	if (x == father[x])
		return x;
	else
	{
		int f = findFather(father[x]);
		father[x] = f;
		return f;
	}
}
//kruskal部分，返回最小生成树的边权之和，
//参数n为顶点个数，m为图的边数
int kruskal(int n, int m)
{
	//ans为所求边权之和，Num_Edge为当前生成树的边数
	int ans = 0, Num_Edge = 0;
	for (int i = 0; i < n; i++)             //顶点范围是[0,n-1]
	{
		father[i] = i;                     
	}
	sort(E, E + m, cmp);              //所有边按边权从小到大排序
	for (int i = 0; i < m; i++)           //枚举所有边
	{
		int faU = findFather(E[i].u);       
//查询测试边两个端点所在集合的根结点
		int faV = findFather(E[i].v);
		if (faU != faV)                 //如果不在一个集合中
		{
			father[faU] = faV;  
//合并集合(即把测试边加入最小生成树中)
			ans += E[i].cost;           //边权之和增加测试边的边权
			Num_Edge++;                //当前生成树的边数加1
			if (Num_Edge == n - 1)
			     break;         //边数等于顶点数减1时结束算法
		}
	}
	if (Num_Edge != n - 1)return -1;    //无法连通时返回-1
	else return ans;                 //返回最小生成树的边权之和
}
int main(){
	int n,m;
	cin >> n >> m;                         //顶点数及其边数
	for(int i = 0;i < m;i++){
		cin >> E[i].u >> E[i].v >> E[i].cost;   //两个端点编号、边权
		 
	} 
	int ans = kruskal(n,m);             //Kruskal算法入口
	cout << ans ;
	return 0; 
}
